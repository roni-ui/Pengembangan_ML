# -*- coding: utf-8 -*-
"""#4_submission_2_Membuat Model_ML_dgn_DataTimeSeries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ifH7-86r41HS3epTttvL4_cjCwBuTciJ

# Proyek Kedua : Membuat Model ML dengan Date Time Series

**Hourly energy consumption time series LSTM**


**Cecep Roni**

Dataset : https://www.kaggle.com/robikscube/hourly-energy-consumption
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

path = ('/content/drive/My Drive/Colab Notebooks/Dicoding_PengembanganML/Submission/HEC/COMED_hourly.csv')
df = pd.read_csv(path)
df.head()

df.info()

df.shape

# Ubah index ke DateTime
df = pd.read_csv(path, index_col='Datetime', parse_dates=['Datetime'])
df.head()

# Visualisasi dataset
import matplotlib.pyplot as plt

plt.figure(figsize=(15,3))
plt.plot(df)
plt.title('COMED_MW hourly power consumption data')
plt.xlabel('Date')
plt.ylabel('Mega Watt (MW)')
plt.show()

"""Model dan plot"""

# get data values
datetime = df.index.values
mw = df['COMED_MW'].values

import tensorflow as tf

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

# Dataset train dan test
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(mw, datetime, test_size = 0.2, random_state = 0 , shuffle=False)
print(len(x_train), len(x_test))

# model
from keras.layers import Dense, LSTM

train_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=5000)
test_set = windowed_dataset(x_test, window_size=60, batch_size=100, shuffle_buffer=5000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5,
                      strides=1, padding="causal",
                      activation="relu",
                      input_shape=[None, 1]),
  tf.keras.layers.LSTM(65, return_sequences=True),
  tf.keras.layers.LSTM(65, return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 400)
])

lr_schedule = tf.keras.callbacks.LearningRateScheduler(
    lambda epoch: 1e-8 * 10**(epoch / 20))
optimizer = tf.keras.optimizers.SGD(learning_rate=1e-8, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

nilai_maks = df['COMED_MW'].max()
print('Nilai maksimal : ' )
print(nilai_maks)

nilai_min = df['COMED_MW'].min()
print('Nilai minimal : ' )
print(nilai_min)

x = (nilai_maks - nilai_min) * (10 / 100)
print(x)

# callback
class Call(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae') < x):
      self.model.stop_training = True
      print("\nNilai MAE < 10% dari skala data")
callbacks = Call()

tf.keras.backend.set_floatx('float64')
history = model.fit(train_set ,epochs=900, validation_data=test_set, callbacks=[callbacks])

import matplotlib.pyplot as plt
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE (Mean Absolute Error )')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train_set', 'test_set'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train_set', 'test_set'], loc='upper left')
plt.show()

