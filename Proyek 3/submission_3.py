# -*- coding: utf-8 -*-
"""submission_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ljfmbGwP6HvpzVsFyp4gNw-FUM7jBQ0L

# Submission 3 Image Classifikation

**Classifikasi 4 Jenis Buah**

Cecep Roni

Dataset : https://www.kaggle.com/aelchimminut/fruits262/download
"""

from google.colab import drive
drive.mount('/content/drive')

!unrar x '/content/drive/My Drive/Colab Notebooks/Fruits.rar' '/content/drive/My Drive/Colab Notebooks/Fruits/'

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random
import os
import cv2

fruits = os.path.join('/content/drive/My Drive/Colab Notebooks/Fruits/')
print(os.listdir(fruits))

ls_fruits = os.listdir(fruits)

print(ls_fruits)

from PIL import Image
total = 0

for x in ls_fruits:
  dir = os.path.join(fruits, x)
  y = len(os.listdir(dir))
  print(x+':', y)
  total = total + y
  
  img_name = os.listdir(dir)
  for z in range(5):
    img_path = os.path.join(dir, img_name[z])
    img = Image.open(img_path)
    print('-',img.size)
  print('---------------')

print('\nTotal :', total)

plt.figure(figsize=(10,5))
p = pd.value_counts(ls_fruits).plot(kind='bar',color='b')
plt.title("Distribution of the fruit types", fontsize = 20)
p.tick_params(labelsize=16)
plt.show()

# tampilkan gambar

fig, axes = plt.subplots(2, 2, figsize=(10,10))
fig.suptitle("Menampilkan Gambar Secara Acak.", fontsize=18)
sorted_fruits = sorted(ls_fruits)
fuits_id = 0
for i in range(2):
  for j in range(2):
    try:
      sel_fruits = sorted_fruits[fuits_id] 
      fuits_id += 1
    except:
      break
    if sel_fruits == '.TEMP':
        continue
    sel_fruits_images = os.listdir(os.path.join(fruits, sel_fruits))
    sel_fruits_random = np.random.choice(sel_fruits_images)
    img = plt.imread(os.path.join(fruits, sel_fruits, sel_fruits_random))
    axes[i][j].imshow(img)
    axes[i][j].set_title(sel_fruits, pad=10, fontsize=22)
    
plt.setp(axes, xticks=[],yticks=[])
plt.show

# Resize Gambar

from tensorflow.keras.preprocessing.image import ImageDataGenerator
 
datagen = ImageDataGenerator(
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    rescale=1/255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    validation_split=0.2   
)

batch_size = 200

trainset = datagen.flow_from_directory(
    fruits,
    target_size=(150, 150),
    batch_size=batch_size,
    class_mode='categorical',
    subset='training')

val_set = datagen.flow_from_directory(
    fruits, 
    target_size=(150, 150),
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation')

import tensorflow as tf
# from tensorflow.keras import applications, optimizers

tf.device('/device:GPU:0')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5), 
    tf.keras.layers.Dense(500, activation='relu'),
    tf.keras.layers.Dense(4, activation='softmax')
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics = ['accuracy'])

model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.92 and logs.get('val_accuracy')>0.92):
      print("\nTingkat Akurasi Sudah 92%, training model selesai!")
      self.model.stop_training = True

callbacks = myCallback()

hist = model.fit(trainset, 
                    epochs = 100, 
                    steps_per_epoch = trainset.samples // batch_size,
                    validation_data = val_set, 
                    validation_steps = val_set.samples // batch_size,
                    verbose = 1,
                    callbacks = [callbacks])

plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Akurasi dari Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Loss dari Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

Convert = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = Convert.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)

!ls -la | grep 'model'